name: PR Trigger
on:
  pull_request:
    paths-ignore:
      - 'docs/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.event.pull_request.head.ref }}
  cancel-in-progress: true

jobs:
  check-commit-author:
    runs-on: ubuntu-latest
    outputs:
      is_active_member: ${{ steps.team-check.outputs.is_active_member }}
    steps:   
      - name: Debug secrets availability
        run: |
          echo "Debugging secret availability..."
          if [ -z "${{ secrets.RHDH_GITHUB_APP_ID }}" ]; then
            echo "❌ RHDH_GITHUB_APP_ID secret is empty or not set"
          else
            echo "✅ RHDH_GITHUB_APP_ID secret is available (length: ${#RHDH_GITHUB_APP_ID})"
          fi
          
          if [ -z "${{ secrets.RHDH_GITHUB_APP_PRIVATE_KEY }}" ]; then
            echo "❌ RHDH_GITHUB_APP_PRIVATE_KEY secret is empty or not set"
          else
            echo "✅ RHDH_GITHUB_APP_PRIVATE_KEY secret is available (length: ${#RHDH_GITHUB_APP_PRIVATE_KEY})"
          fi
        env:
          RHDH_GITHUB_APP_ID: ${{ secrets.RHDH_GITHUB_APP_ID }}
          RHDH_GITHUB_APP_PRIVATE_KEY: ${{ secrets.RHDH_GITHUB_APP_PRIVATE_KEY }}
          
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.1.1
        with:
          app-id: ${{ secrets.RHDH_GITHUB_APP_ID }}
          private-key: ${{ secrets.RHDH_GITHUB_APP_PRIVATE_KEY }}
      - name: Checkout main branch for security
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 1
          ref: main  # Always use main branch for security-critical action
          persist-credentials: false
      - name: Check if commit author is an active member of the team
        id: team-check
        uses: ./.github/actions/check-author
        with:
          author: ${{ github.actor }}
          organization: redhat-developer
          team: rhdh
          gh_token: ${{ steps.app-token.outputs.token }}
  authorize:
    # The 'external' environment is configured with the maintainers team as required reviewers.
    # All the subsequent jobs in this workflow 'need' this job, which will require manual approval for PRs coming from external forks.
    # Use 'internal' environment if the author is in the team OR if it's an internal PR (not from a fork)
    # see list of approvers in OWNERS file
    environment:
      ${{ (needs.check-commit-author.outputs.is_active_member == 'true' || github.event.pull_request.head.repo.full_name == github.repository) && 'internal' || 'external' }}
    runs-on: ubuntu-latest
    needs: check-commit-author
    steps:
      - name: Check if internal PR
        id: check
        run: |
          if [[ "${{ needs.check-commit-author.outputs.is_active_member }}" == "true" ]]; then
            echo "✓ Commit author is an active member of rhdh team - using internal environment"
          elif [[ "${{ github.event.pull_request.head.repo.full_name }}" == "${{ github.repository }}" ]]; then
            echo "✓ Internal PR (not from fork) - using internal environment"
          else
            echo "✓ External PR from fork from non-rhdh team member - using external environment for security"
          fi
  build-image: 
    needs: authorize
    name: Build Container Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Create Dockerfile
        run: |
          cat << 'EOF' > Dockerfile
          FROM registry.access.redhat.com/ubi8/ubi:latest
          COPY README.md /app/
          WORKDIR /app
          CMD ["cat", "README.md"]
          EOF

      - name: Build Image with Buildah
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: test-app
          tags: |
            pr-${{ github.event.number }}
            ${{ github.sha }}
          containerfiles: |
            ./Dockerfile

      - name: Save image to tar
        run: |
          mkdir -p artifacts
          buildah push ${{ steps.build-image.outputs.image }}:pr-${{ github.event.number }} oci-archive:artifacts/image.tar
          echo "pr-${{ github.event.number }}" > artifacts/tags.txt
          echo "${{ github.sha }}" >> artifacts/tags.txt
          echo "${{ steps.build-image.outputs.image }}" > artifacts/image-name.txt

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: container-image-pr-${{ github.event.number }}-${{ github.sha }}
          path: artifacts/
          retention-days: 7

      - name: print_event
        run: |
          echo "${{ toJson(github.event) }}"
      - name: print_github
        run: |
          echo "${{ toJson(github) }}"

      - name: Finish
        run: |
          echo "Image built and uploaded as artifact"
