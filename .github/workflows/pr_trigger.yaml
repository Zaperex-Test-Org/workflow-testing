name: PR Trigger
on:
  pull_request_target:
    paths-ignore:
      - 'docs/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.event.pull_request.head.ref }}
  cancel-in-progress: true

env:
  REGISTRY: quay.io

jobs:
  check-commit-author:
    runs-on: ubuntu-latest
    outputs:
      is_active_member: ${{ steps.team-check.outputs.is_active_member }}
    steps:   
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.1.1
        with:
          app-id: ${{ secrets.RHDH_GITHUB_APP_ID }}
          private-key: ${{ secrets.RHDH_GITHUB_APP_PRIVATE_KEY }}
      - name: Checkout main branch for security
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 1
          ref: main  # Always use main branch for security-critical action
          persist-credentials: false
      - name: Check if commit author is an active member of the team
        id: team-check
        uses: ./.github/actions/check-author
        with:
          author: ${{ github.actor }}
          organization: Zaperex-Test-Org
          team: testers
          gh_token: ${{ steps.app-token.outputs.token }}
  authorize:
    # The 'external' environment is configured with the maintainers team as required reviewers.
    # All the subsequent jobs in this workflow 'need' this job, which will require manual approval for PRs coming from external forks.
    # Use 'internal' environment if the author is in the team OR if it's an internal PR (not from a fork)
    # see list of approvers in OWNERS file
    environment:
      ${{ (needs.check-commit-author.outputs.is_active_member == 'true' || github.event.pull_request.head.repo.full_name == github.repository) && 'internal' || 'external' }}
    runs-on: ubuntu-latest
    needs: check-commit-author
    steps:
      - name: Check if internal PR
        id: check
        run: |
          if [[ "${{ needs.check-commit-author.outputs.is_active_member }}" == "true" ]]; then
            echo "✓ Commit author is an active member of rhdh team - using internal environment"
          elif [[ "${{ github.event.pull_request.head.repo.full_name }}" == "${{ github.repository }}" ]]; then
            echo "✓ Internal PR (not from fork) - using internal environment"
          else
            echo "✓ External PR from fork from non-rhdh team member - using external environment for security"
          fi
  build-image: 
    needs: authorize
    name: Build Container Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: set-short-sha
        run: |
          REF=${{ github.event.pull_request.head.ref }}
          SHORT_SHA=$(git rev-parse --short=8 $REF)
          echo "SHORT_SHA: $SHORT_SHA"
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/my-test-organization/test-registry
          tags: |
            pr-${{ github.event.number }}
            pr-${{ github.event.number }}-${{ env.SHORT_SHA }}
            
      - name: Build Image with Buildah 
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          tags: ${{ steps.meta.outputs.tags }}
          containerfiles: |
            ./Dockerfile

      - name: Save image to tar
        run: |
          podman images
          mkdir -p artifacts

          # Extract the built image tags from the metadata
          TAGS_LIST="${{ steps.meta.outputs.tags }}"

          # Save all the built images to tar (podman save can handle multiple tags)
          echo "Saving images with tags:"
          echo "$TAGS_LIST"
        
          podman save $TAGS_LIST -o artifacts/image.tar
          echo "$TAGS_LIST" > artifacts/tags.txt
          echo "my-test-organization/test-registry" > artifacts/image-name.txt
          echo "${{ env.REGISTRY }}" > artifacts/registry.txt

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: container-image-pr-${{ github.event.number }}-${{ env.SHORT_SHA }}
          path: artifacts/
          retention-days: 7

      - name: print_github_stuff
        run: |
          echo '${{ toJson(github) }}' | jq .

      - name: Finish
        run: |
          echo "Image built and uploaded as artifact"
