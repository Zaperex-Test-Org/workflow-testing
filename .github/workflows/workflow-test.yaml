name: Test Volume Mounting - Docker vs Podman

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-docker-volumes:
    runs-on: ubuntu-latest
    name: Test Docker Volume Mounting
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create test directory structure
        run: |
          set -x 
          mkdir -p ./test-cache/docker-test
          echo "Initial host file" > ./test-cache/docker-test/host-file.txt
          ls -la ./test-cache/

      - name: Test Docker volume mounting
        run: |
          set -x 
          echo "=== Testing Docker Volume Mounting ==="
          
          # Run container that creates files in mounted volume
          docker run --rm \
            -v "$PWD/test-cache:/mounted-cache:z" \
            -w /mounted-cache \
            alpine:latest sh -c '
              echo "=== Inside Docker container ==="
              ls -la /mounted-cache/
              
              # Create files and directories
              mkdir -p /mounted-cache/docker-created/subdir
              echo "Created by Docker container" > /mounted-cache/docker-created/container-file.txt
              echo "Another file" > /mounted-cache/docker-created/subdir/nested-file.txt
              
              # Set permissions
              chmod 755 /mounted-cache/docker-created
              chmod 644 /mounted-cache/docker-created/container-file.txt
              
              echo "=== Files created in container ==="
              ls -la /mounted-cache/
              ls -la /mounted-cache/docker-created/
              
              # Show ownership
              echo "=== Ownership inside container ==="
              ls -ln /mounted-cache/docker-created/
            '

      - name: Verify Docker volume persistence
        run: |
          set -x 
          echo "=== Verifying Docker volume persistence on host ==="
          ls -la ./test-cache/
          
          if [ -d "./test-cache/docker-created" ]; then
            echo "✅ Docker-created directory exists on host"
            ls -la ./test-cache/docker-created/
            
            if [ -f "./test-cache/docker-created/container-file.txt" ]; then
              echo "✅ Docker-created file exists on host"
              cat ./test-cache/docker-created/container-file.txt
            else
              echo "❌ Docker-created file NOT found on host"
            fi
          else
            echo "❌ Docker-created directory NOT found on host"
          fi
          
          echo "=== Host ownership ==="
          ls -ln ./test-cache/docker-created/ || echo "Directory not accessible"

  test-podman-volumes:
    runs-on: ubuntu-latest
    name: Test Podman Volume Mounting
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Create test directory structure
        run: |
          mkdir -p ./test-cache/podman-test
          echo "Initial host file" > ./test-cache/podman-test/host-file.txt
          ls -la ./test-cache/

      - name: Test Podman volume mounting
        run: |
          set -x 
          echo "=== Testing Podman Volume Mounting ==="
          
          # Run container that creates files in mounted volume
          podman run --rm \
            -v "$PWD/test-cache:/mounted-cache:z" \
            -w /mounted-cache \
            alpine:latest sh -c '
              echo "=== Inside Podman container ==="
              ls -la /mounted-cache/
              
              # Create files and directories
              mkdir -p /mounted-cache/podman-created/subdir
              echo "Created by Podman container" > /mounted-cache/podman-created/container-file.txt
              echo "Another file" > /mounted-cache/podman-created/subdir/nested-file.txt
              
              # Set permissions
              chmod 755 /mounted-cache/podman-created
              chmod 644 /mounted-cache/podman-created/container-file.txt
              
              echo "=== Files created in container ==="
              ls -la /mounted-cache/
              ls -la /mounted-cache/podman-created/
              
              # Show ownership
              echo "=== Ownership inside container ==="
              ls -ln /mounted-cache/podman-created/
            '

      - name: Verify Podman volume persistence
        run: |
          set -x 
          echo "=== Verifying Podman volume persistence on host ==="
          ls -la ./test-cache/
          
          if [ -d "./test-cache/podman-created" ]; then
            echo "✅ Podman-created directory exists on host"
            ls -la ./test-cache/podman-created/
            
            if [ -f "./test-cache/podman-created/container-file.txt" ]; then
              echo "✅ Podman-created file exists on host"
              cat ./test-cache/podman-created/container-file.txt
            else
              echo "❌ Podman-created file NOT found on host"
            fi
          else
            echo "❌ Podman-created directory NOT found on host"
          fi
          
          echo "=== Host ownership ==="
          ls -ln ./test-cache/podman-created/ || echo "Directory not accessible"


  test-permissions-and-selinux:
    runs-on: ubuntu-latest
    name: Test Permissions and SELinux Context
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Check SELinux status
        run: |
          set -x 
          echo "=== SELinux Status ==="
          sestatus || echo "SELinux not available"
          getenforce || echo "SELinux not enforcing"

      - name: Test different volume mount options
        run: |
          set -x 
          echo "=== Testing different volume mount options ==="
          
          mkdir -p ./test-volumes
          
          # Test without :z
          echo "--- Without :z flag ---"
          docker run --rm -v "$PWD/test-volumes:/test" alpine:latest sh -c '
            mkdir -p /test/no-z
            echo "no-z test" > /test/no-z/file.txt
          ' || echo "Docker without :z failed"
          ls -la ./test-volumes/ || echo "No directory created"
          
          # Test with :z
          echo "--- With :z flag ---"
          docker run --rm -v "$PWD/test-volumes:/test:z" alpine:latest sh -c '
            mkdir -p /test/with-z
            echo "with-z test" > /test/with-z/file.txt
          ' || echo "Docker with :z failed"
          ls -la ./test-volumes/ || echo "No directory created"
          
          # Test with :Z
          echo "--- With :Z flag ---"
          docker run --rm -v "$PWD/test-volumes:/test:Z" alpine:latest sh -c '
            mkdir -p /test/with-Z
            echo "with-Z test" > /test/with-Z/file.txt
          ' || echo "Docker with :Z failed"
          ls -la ./test-volumes/ || echo "No directory created"

      - name: Compare Docker vs Podman with same volume options
        run: |
          set -x 
          echo "=== Comparing Docker vs Podman ==="
          
          mkdir -p ./comparison-test
          
          echo "--- Docker test ---"
          docker run --rm -v "$PWD/comparison-test:/test:z" alpine:latest sh -c '
            echo "docker-test" > /test/docker-created.txt
            ls -la /test/
          '
          
          echo "--- Podman test ---"
          podman run --rm -v "$PWD/comparison-test:/test:z" alpine:latest sh -c '
            echo "podman-test" > /test/podman-created.txt
            ls -la /test/
          '
          
          echo "--- Final state on host ---"
          ls -la ./comparison-test/
          echo "Docker file content:" && cat ./comparison-test/docker-created.txt || echo "Docker file not found"
          echo "Podman file content:" && cat ./comparison-test/podman-created.txt || echo "Podman file not found"

  test-nonexistent-directory-mounting:
    runs-on: ubuntu-latest
    name: Test Mounting Non-Existent Directories
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Test Docker with non-existent directory
        run: |
          set -x 
          echo "=== Testing Docker with non-existent directory ==="
          
          # Ensure the directory doesn't exist
          rm -rf ./nonexistent-docker-test
          
          echo "--- Before Docker run ---"
          ls -la . | grep nonexistent || echo "No nonexistent directories found (expected)"
          
          # Try to mount a non-existent directory
          echo "--- Running Docker with non-existent mount point ---"
          docker run --rm \
            -v "$PWD/nonexistent-docker-test:/test-mount:z" \
            alpine:latest sh -c '
              echo "=== Inside Docker container ==="
              ls -la /
              echo "Mount point /test-mount:"
              ls -la /test-mount/ || echo "Mount point not accessible"
              
              echo "Attempting to create files in mount point..."
              mkdir -p /test-mount/created-in-container
              echo "Docker created this file" > /test-mount/created-in-container/test.txt
              echo "Files created:"
              ls -la /test-mount/
              ls -la /test-mount/created-in-container/ || echo "Subdir not accessible"
            ' || echo "Docker run failed"
          
          echo "--- After Docker run ---"
          if [ -d "./nonexistent-docker-test" ]; then
            echo "✅ Docker created the non-existent directory on host"
            ls -la ./nonexistent-docker-test/
            if [ -f "./nonexistent-docker-test/created-in-container/test.txt" ]; then
              echo "✅ Files created in container are accessible on host"
              cat ./nonexistent-docker-test/created-in-container/test.txt
            else
              echo "❌ Files created in container are NOT accessible on host"
            fi
          else
            echo "❌ Docker did NOT create the non-existent directory on host"
          fi

      - name: Test Podman with non-existent directory
        run: |
          set -x 
          echo "=== Testing Podman with non-existent directory ==="
          
          # Ensure the directory doesn't exist
          rm -rf ./nonexistent-podman-test
          
          echo "--- Before Podman run ---"
          ls -la . | grep nonexistent || echo "No nonexistent directories found (expected)"
          
          # Try to mount a non-existent directory
          echo "--- Running Podman with non-existent mount point ---"
          podman run --rm \
            -v "$PWD/nonexistent-podman-test:/test-mount:z" \
            alpine:latest sh -c '
              echo "=== Inside Podman container ==="
              ls -la /
              echo "Mount point /test-mount:"
              ls -la /test-mount/ || echo "Mount point not accessible"
              
              echo "Attempting to create files in mount point..."
              mkdir -p /test-mount/created-in-container
              echo "Podman created this file" > /test-mount/created-in-container/test.txt
              echo "Files created:"
              ls -la /test-mount/
              ls -la /test-mount/created-in-container/ || echo "Subdir not accessible"
            ' || echo "Podman run failed"
          
          echo "--- After Podman run ---"
          if [ -d "./nonexistent-podman-test" ]; then
            echo "✅ Podman created the non-existent directory on host"
            ls -la ./nonexistent-podman-test/
            if [ -f "./nonexistent-podman-test/created-in-container/test.txt" ]; then
              echo "✅ Files created in container are accessible on host"
              cat ./nonexistent-podman-test/created-in-container/test.txt
            else
              echo "❌ Files created in container are NOT accessible on host"
            fi
          else
            echo "❌ Podman did NOT create the non-existent directory on host"
          fi

      - name: Test nested non-existent path mounting
        run: |
          set -x 
          echo "=== Testing nested non-existent path mounting ==="
          
          # Clean up any existing directories
          rm -rf ./deeply/nested/nonexistent
          
          echo "--- Testing Docker with deeply nested non-existent path ---"
          docker run --rm \
            -v "$PWD/deeply/nested/nonexistent:/deep-mount:z" \
            alpine:latest sh -c '
              echo "=== Inside Docker container (nested test) ==="
              ls -la /deep-mount/ || echo "Deep mount not accessible"
              echo "Creating file in deep mount..."
              echo "Docker deep nested file" > /deep-mount/deep-test.txt
              ls -la /deep-mount/
            ' || echo "Docker deep nested run failed"
          
          echo "--- After Docker deep nested run ---"
          if [ -f "./deeply/nested/nonexistent/deep-test.txt" ]; then
            echo "✅ Docker created deeply nested directory structure"
            echo "Directory structure:"
            find ./deeply -type d
            echo "File content:"
            cat ./deeply/nested/nonexistent/deep-test.txt
          else
            echo "❌ Docker did NOT create deeply nested directory structure"
          fi
          
          echo "--- Testing Podman with deeply nested non-existent path ---"
          podman run --rm \
            -v "$PWD/deeply/nested/nonexistent:/deep-mount:z" \
            alpine:latest sh -c '
              echo "=== Inside Podman container (nested test) ==="
              ls -la /deep-mount/ || echo "Deep mount not accessible"
              echo "Creating file in deep mount..."
              echo "Podman deep nested file" > /deep-mount/deep-test-podman.txt
              ls -la /deep-mount/
            ' || echo "Podman deep nested run failed"
          
          echo "--- After Podman deep nested run ---"
          if [ -f "./deeply/nested/nonexistent/deep-test-podman.txt" ]; then
            echo "✅ Podman handled deeply nested directory structure"
            echo "Files in nested directory:"
            ls -la ./deeply/nested/nonexistent/
          else
            echo "❌ Podman did NOT handle deeply nested directory structure correctly"
          fi

      - name: Test mounting non-existent directory with specific permissions
        run: |
          set -x 
          echo "=== Testing non-existent directory with permission operations ==="
          
          rm -rf ./permission-test-dir
          
          echo "--- Testing permission setting in non-existent mounted directory ---"
          docker run --rm \
            -v "$PWD/permission-test-dir:/perm-test:z" \
            alpine:latest sh -c '
              echo "=== Setting permissions in mounted non-existent dir ==="
              mkdir -p /perm-test/subdir
              echo "Permission test file" > /perm-test/subdir/file.txt
              
              # Try to set specific permissions
              chmod 755 /perm-test/subdir
              chmod 644 /perm-test/subdir/file.txt
              
              echo "Permissions inside container:"
              ls -la /perm-test/
              ls -la /perm-test/subdir/
            '
          
          echo "--- Checking permissions on host ---"
          if [ -d "./permission-test-dir" ]; then
            echo "✅ Permission test directory created"
            echo "Host permissions:"
            ls -la ./permission-test-dir/
            ls -la ./permission-test-dir/subdir/ || echo "Subdir not accessible"
            
            echo "Numeric permissions:"
            stat -c "%a %n" ./permission-test-dir/subdir/* || echo "Cannot stat files"
          else
            echo "❌ Permission test directory NOT created"
          fi

      - name: Test existing directory with new content creation
        run: |
          set -x 
          echo "=== Testing existing directory with new content creation ==="
          
          # Create an existing directory with some initial content
          mkdir -p ./existing-mount-test/initial-content
          echo "Pre-existing host file" > ./existing-mount-test/initial-content/host-file.txt
          echo "Another host file" > ./existing-mount-test/host-root-file.txt
          
          echo "--- Initial state of existing directory ---"
          echo "Directory structure:"
          find ./existing-mount-test -type f -exec echo "FILE: {}" \; -exec cat {} \;
          
          echo "--- Testing Docker with existing directory ---"
          docker run --rm \
            -v "$PWD/existing-mount-test:/existing-mount:z" \
            alpine:latest sh -c '
              echo "=== Inside Docker container (existing dir test) ==="
              echo "Current contents of mount:"
              find /existing-mount -type f -exec echo "FOUND: {}" \; -exec head -n1 {} \;
              
              echo "Creating new content alongside existing files..."
              # Create deeply nested Docker structure with simple names
              mkdir -p /existing-mount/docker-added/layer1/layer2/layer3/layer4/layer5/layer6
              mkdir -p /existing-mount/docker-added/path1/path2/path3/path4/path5
              mkdir -p /existing-mount/docker-added/deep1/deep2/deep3/deep4/deep5/deep6/deep7
              
              # Add files at various nesting levels
              echo "Docker root file" > /existing-mount/docker-added/root.txt
              echo "Docker layer1 file" > /existing-mount/docker-added/layer1/file1.txt
              echo "Docker layer2 file" > /existing-mount/docker-added/layer1/layer2/file2.txt
              echo "Docker layer3 file" > /existing-mount/docker-added/layer1/layer2/layer3/file3.txt
              echo "Docker layer4 file" > /existing-mount/docker-added/layer1/layer2/layer3/layer4/file4.txt
              echo "Docker layer5 file" > /existing-mount/docker-added/layer1/layer2/layer3/layer4/layer5/file5.txt
              echo "Docker layer6 file" > /existing-mount/docker-added/layer1/layer2/layer3/layer4/layer5/layer6/file6.txt
              echo "Docker path3 file" > /existing-mount/docker-added/path1/path2/path3/pathfile.txt
              echo "Docker path5 file" > /existing-mount/docker-added/path1/path2/path3/path4/path5/deep-path.txt
              echo "Docker deep7 file" > /existing-mount/docker-added/deep1/deep2/deep3/deep4/deep5/deep6/deep7/deepest.txt
              
              # Add content to existing deep directories
              echo "Docker addition to initial content" > /existing-mount/initial-content/docker-addition.txt

              
              # Create file at root level
              echo "Docker root level addition" > /existing-mount/docker-root-addition.txt
              
              echo "Final state inside container:"
              find /existing-mount -type f | sort
            '
          
          echo "--- After Docker run on existing directory ---"
          echo "Complete directory structure:"
          find ./existing-mount-test -type f | sort
          
          echo "Verification of new Docker content:"
          if [ -f "./existing-mount-test/docker-added/new-file.txt" ]; then
            echo "✅ Docker created new subdirectory and files"
            cat ./existing-mount-test/docker-added/new-file.txt
          else
            echo "❌ Docker did NOT create new content in existing directory"
          fi
          
          # Test deeply nested Docker content
          if [ -f "./existing-mount-test/docker-added/layer1/layer2/layer3/layer4/layer5/layer6/file6.txt" ]; then
            echo "✅ Docker created deeply nested structure (6 levels)"
            echo "Layer6 file content: $(cat ./existing-mount-test/docker-added/layer1/layer2/layer3/layer4/layer5/layer6/file6.txt)"
          else
            echo "❌ Docker did NOT create deeply nested structure"
          fi
          
          if [ -f "./existing-mount-test/docker-added/deep1/deep2/deep3/deep4/deep5/deep6/deep7/deepest.txt" ]; then
            echo "✅ Docker created extremely deep structure (7 levels)"
            echo "Deepest file content: $(cat ./existing-mount-test/docker-added/deep1/deep2/deep3/deep4/deep5/deep6/deep7/deepest.txt)"
          else
            echo "❌ Docker did NOT create extremely deep structure"
          fi
          
          if [ -f "./existing-mount-test/initial-content/docker-addition.txt" ]; then
            echo "✅ Docker added content to existing subdirectory"
            cat ./existing-mount-test/initial-content/docker-addition.txt
          else
            echo "❌ Docker did NOT add content to existing subdirectory"
          fi
          
          echo "--- Testing Podman with same existing directory ---"
          podman run --rm \
            -v "$PWD/existing-mount-test:/existing-mount:z" \
            alpine:latest sh -c '
              echo "=== Inside Podman container (existing dir test) ==="
              echo "Current contents of mount:"
              find /existing-mount -type f -exec echo "FOUND: {}" \; -exec head -n1 {} \;
              
              echo "Creating new content alongside existing files..."
              # Create deeply nested Podman structure with simple names
              mkdir -p /existing-mount/podman-added/levelA/levelB/levelC/levelD/levelE/levelF/levelG
              mkdir -p /existing-mount/podman-added/dirA/dirB/dirC/dirD/dirE/dirF
              mkdir -p /existing-mount/podman-added/nestA/nestB/nestC/nestD/nestE/nestF/nestG/nestH
              
              # Add files at various nesting levels
              echo "Podman root file" > /existing-mount/podman-added/root.txt
              echo "Podman levelA file" > /existing-mount/podman-added/levelA/fileA.txt
              echo "Podman levelB file" > /existing-mount/podman-added/levelA/levelB/fileB.txt
              echo "Podman levelC file" > /existing-mount/podman-added/levelA/levelB/levelC/fileC.txt
              echo "Podman levelD file" > /existing-mount/podman-added/levelA/levelB/levelC/levelD/fileD.txt
              echo "Podman levelE file" > /existing-mount/podman-added/levelA/levelB/levelC/levelD/levelE/fileE.txt
              echo "Podman levelF file" > /existing-mount/podman-added/levelA/levelB/levelC/levelD/levelE/levelF/fileF.txt
              echo "Podman levelG file" > /existing-mount/podman-added/levelA/levelB/levelC/levelD/levelE/levelF/levelG/fileG.txt
              echo "Podman dirC file" > /existing-mount/podman-added/dirA/dirB/dirC/dirfile.txt
              echo "Podman dirF file" > /existing-mount/podman-added/dirA/dirB/dirC/dirD/dirE/dirF/deep-dir.txt
              echo "Podman nestH file" > /existing-mount/podman-added/nestA/nestB/nestC/nestD/nestE/nestF/nestG/nestH/deepest.txt
              
              # Add content to existing deep directories (including Docker additions)
              echo "Podman addition to initial content" > /existing-mount/initial-content/podman-addition.txt
              
              # Also add to Docker created directories to test cross-container interaction
              echo "Podman addition to Docker layer1" > /existing-mount/docker-added/layer1/podman-addition.txt || echo "Could not write to Docker directory"
              echo "Podman addition to Docker deep7" > /existing-mount/docker-added/deep1/deep2/deep3/deep4/deep5/deep6/deep7/podman-deep.txt || echo "Could not write to Docker deep directory"
              
              # Create file at root level
              echo "Podman root level addition" > /existing-mount/podman-root-addition.txt
              
              echo "Final state inside container:"
              find /existing-mount -type f | sort
            '
          
          echo "--- Final state after both Docker and Podman ---"
          echo "Complete directory structure:"
          find ./existing-mount-test -type f | sort
          
          echo "Verification of Podman content:"
          if [ -f "./existing-mount-test/podman-added/new-file.txt" ]; then
            echo "✅ Podman created new subdirectory and files"
            cat ./existing-mount-test/podman-added/new-file.txt
          else
            echo "❌ Podman did NOT create new content in existing directory"
          fi
          
          # Test deeply nested Podman content
          if [ -f "./existing-mount-test/podman-added/levelA/levelB/levelC/levelD/levelE/levelF/levelG/fileG.txt" ]; then
            echo "✅ Podman created deeply nested structure (7 levels)"
            echo "LevelG file content: $(cat ./existing-mount-test/podman-added/levelA/levelB/levelC/levelD/levelE/levelF/levelG/fileG.txt)"
          else
            echo "❌ Podman did NOT create deeply nested structure"
          fi
          
          if [ -f "./existing-mount-test/podman-added/nestA/nestB/nestC/nestD/nestE/nestF/nestG/nestH/deepest.txt" ]; then
            echo "✅ Podman created extremely deep structure (8 levels)"
            echo "Deepest nest content: $(cat ./existing-mount-test/podman-added/nestA/nestB/nestC/nestD/nestE/nestF/nestG/nestH/deepest.txt)"
          else
            echo "❌ Podman did NOT create extremely deep structure"
          fi
          
          # Test cross-container interaction
          if [ -f "./existing-mount-test/docker-added/layer1/podman-addition.txt" ]; then
            echo "✅ Podman successfully wrote to Docker-created directory"
            echo "Cross-container file content: $(cat ./existing-mount-test/docker-added/layer1/podman-addition.txt)"
          else
            echo "❌ Podman could NOT write to Docker-created directory"
          fi
          
          if [ -f "./existing-mount-test/docker-added/deep1/deep2/deep3/deep4/deep5/deep6/deep7/podman-deep.txt" ]; then
            echo "✅ Podman wrote to Docker's deepest directory"
            echo "Deep cross-container content: $(cat ./existing-mount-test/docker-added/deep1/deep2/deep3/deep4/deep5/deep6/deep7/podman-deep.txt)"
          else
            echo "❌ Podman could NOT write to Docker's deepest directory"
          fi
          
          echo "Content summary:"
          echo "Original host files:"
          ls -la ./existing-mount-test/*.txt 2>/dev/null || echo "No root level host files found"
          echo "Docker additions:"
          ls -la ./existing-mount-test/docker-* 2>/dev/null || echo "No Docker additions found"
          echo "Podman additions:"
          ls -la ./existing-mount-test/podman-* 2>/dev/null || echo "No Podman additions found"
          echo "Mixed content in initial-content directory:"
          ls -la ./existing-mount-test/initial-content/ 2>/dev/null || echo "Initial content directory not accessible"
          
          echo "=== Deep Structure Analysis ==="
          echo "Docker deepest structure depth:"
          find ./existing-mount-test/docker-added -type f -exec dirname {} \; | awk -F/ '{print NF-1}' | sort -n | tail -1 || echo "No Docker structure found"
          echo "Podman deepest structure depth:"
          find ./existing-mount-test/podman-added -type f -exec dirname {} \; | awk -F/ '{print NF-1}' | sort -n | tail -1 || echo "No Podman structure found"
          
          echo "Total files created by Docker:"
          find ./existing-mount-test/docker-added -type f | wc -l || echo "0"
          echo "Total files created by Podman:"
          find ./existing-mount-test/podman-added -type f | wc -l || echo "0"
          
          echo "Docker directory structure sample:"
          find ./existing-mount-test/docker-added -type d | head -5 || echo "No Docker directories"
          echo "Podman directory structure sample:"
          find ./existing-mount-test/podman-added -type d | head -5 || echo "No Podman directories"

      - name: Test ownership and permissions in existing mounted directory
        run: |
          set -x 
          echo "=== Testing ownership and permissions in existing mounted directory ==="
          
          # Create directory with specific ownership and permissions
          mkdir -p ./ownership-test/existing-subdir
          echo "Host owned file" > ./ownership-test/host-file.txt
          chmod 755 ./ownership-test/existing-subdir
          chmod 644 ./ownership-test/host-file.txt
          
          echo "--- Initial ownership and permissions ---"
          ls -la ./ownership-test/
          ls -ln ./ownership-test/  # Numeric IDs
          
          echo "--- Docker test with existing directory ownership ---"
          docker run --rm \
            -v "$PWD/ownership-test:/ownership-mount:z" \
            alpine:latest sh -c '
              echo "=== Inside Docker container (ownership test) ==="
              echo "Container user info:"
              id
              
              echo "Mount point ownership inside container:"
              ls -ln /ownership-mount/
              
              echo "Creating files with container user..."
              mkdir -p /ownership-mount/docker-created
              echo "Docker created file" > /ownership-mount/docker-created/container-file.txt
              
              echo "Attempting to modify existing file..."
              echo "Docker modification" >> /ownership-mount/host-file.txt || echo "Could not modify host file"
              
              echo "Final permissions inside container:"
              ls -ln /ownership-mount/
              ls -ln /ownership-mount/docker-created/ || echo "Docker created dir not accessible"
            '
          
          echo "--- After Docker run - checking host ownership ---"
          echo "Ownership on host:"
          ls -ln ./ownership-test/
          ls -ln ./ownership-test/docker-created/ 2>/dev/null || echo "Docker created directory not found"
          
          echo "Content of modified host file:"
          cat ./ownership-test/host-file.txt || echo "Cannot read host file"
          
          echo "--- Podman test with existing directory ownership ---"
          podman run --rm \
            -v "$PWD/ownership-test:/ownership-mount:z" \
            alpine:latest sh -c '
              echo "=== Inside Podman container (ownership test) ==="
              echo "Container user info:"
              id
              
              echo "Mount point ownership inside container:"
              ls -ln /ownership-mount/
              
              echo "Creating files with container user..."
              mkdir -p /ownership-mount/podman-created
              echo "Podman created file" > /ownership-mount/podman-created/container-file.txt
              
              echo "Attempting to modify existing file..."
              echo "Podman modification" >> /ownership-mount/host-file.txt || echo "Could not modify host file"
              
              echo "Final permissions inside container:"
              ls -ln /ownership-mount/
              ls -ln /ownership-mount/podman-created/ || echo "Podman created dir not accessible"
            '
          
          echo "--- Final ownership comparison ---"
          echo "Final ownership on host:"
          ls -ln ./ownership-test/
          echo "Docker created content:"
          ls -ln ./ownership-test/docker-created/ 2>/dev/null || echo "No Docker content"
          echo "Podman created content:"
          ls -ln ./ownership-test/podman-created/ 2>/dev/null || echo "No Podman content"
          
          echo "Final content of shared file:"
          cat ./ownership-test/host-file.txt || echo "Cannot read host file"
